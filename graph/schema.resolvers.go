package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"

	"github.com/ajm896/adlibai/db/models"
	"github.com/ajm896/adlibai/graph/model"
)

// CreateJournalEntry is the resolver for the createJournalEntry field.
func (r *mutationResolver) CreateJournalEntry(ctx context.Context, userID string, content string) (*model.JournalEntry, error) {
	var journalEntry = models.NewJournalEntry(content, false, userID)
	r.DB.WithContext(ctx).Create(&journalEntry)
	return journalEntry.ToQLJournalEntry(), nil
}

// UpdateJournalEntry is the resolver for the updateJournalEntry field.
func (r *mutationResolver) UpdateJournalEntry(ctx context.Context, id string, content string) (*model.JournalEntry, error) {
	r.DB.WithContext(ctx).Model(&models.JournalEntry{}).Where("id = ?", id).Update("content", content)
	var journalEntry models.JournalEntry
	r.DB.WithContext(ctx).Find(&journalEntry, id)
	return journalEntry.ToQLJournalEntry(), nil
}

// DeleteJournalEntry is the resolver for the deleteJournalEntry field.
func (r *mutationResolver) DeleteJournalEntry(ctx context.Context, id string) (*bool, error) {
	r.DB.WithContext(ctx).Delete(&models.JournalEntry{}, id)
	return nil, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string) (*model.User, error) {
	var user = models.NewUser(username, email)
	r.DB.WithContext(ctx).Create(&user)
	return user.ToQLUser(), nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	var user models.User
	r.DB.WithContext(ctx).Find(&user, id)
	return user.ToQLUser(), nil
}

// GetUsers is the resolver for the getUsers field.
func (r *queryResolver) GetUsers(ctx context.Context) ([]*model.User, error) {
	var users []*models.User
	r.DB.WithContext(ctx).Find(&users)
	var qlUsers []*model.User
	for _, user := range users {
		qlUsers = append(qlUsers, user.ToQLUser())
	}
	return qlUsers, nil
}

// GetJournalEntries is the resolver for the getJournalEntries field.
func (r *queryResolver) GetJournalEntries(ctx context.Context, userID string) ([]*model.JournalEntry, error) {
	var journalEntries []*models.JournalEntry
	r.DB.WithContext(ctx).Where("user_id = ?", userID).Find(&journalEntries)
	var qlJournalEntries []*model.JournalEntry
	for _, journalEntry := range journalEntries {
		qlJournalEntries = append(qlJournalEntries, journalEntry.ToQLJournalEntry())
	}
	return qlJournalEntries, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
