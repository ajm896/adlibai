package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"context"
	"crypto/rand"
	"fmt"
	"time"

	"github.com/ajm896/adlibai/graph/model"
)

// CreateJournalEntry is the resolver for the createJournalEntry field.
func (r *mutationResolver) CreateJournalEntry(ctx context.Context, userID string, content string) (*model.JournalEntry, error) {
	panic(fmt.Errorf("not implemented: CreateJournalEntry - createJournalEntry"))
}

// UpdateJournalEntry is the resolver for the updateJournalEntry field.
func (r *mutationResolver) UpdateJournalEntry(ctx context.Context, id string, content string) (*model.JournalEntry, error) {
	panic(fmt.Errorf("not implemented: UpdateJournalEntry - updateJournalEntry"))
}

// DeleteJournalEntry is the resolver for the deleteJournalEntry field.
func (r *mutationResolver) DeleteJournalEntry(ctx context.Context, id string) (*bool, error) {
	panic(fmt.Errorf("not implemented: DeleteJournalEntry - deleteJournalEntry"))
}

// SetAIMode is the resolver for the setAIMode field.
func (r *mutationResolver) SetAIMode(ctx context.Context, userID string, mode model.AIMode) (*model.UserSettings, error) {
	panic(fmt.Errorf("not implemented: SetAIMode - setAIMode"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, username string, email string) (*model.User, error) {
	db := r.DB.WithContext(ctx)
	// Generate a random ID
	b := make([]byte, 16)
	_, err := rand.Read(b)
	if err != nil {
		return nil, err
	}
	id := fmt.Sprintf("%x", b)
	user := model.User{ID: id, Username: username, Email: email, CreatedAt: time.Now().String(), UpdatedAt: time.Now().String()}
	db.Create(&user)
	return &user, nil
}

// Me is the resolver for the me field.
func (r *queryResolver) Me(ctx context.Context) (*model.User, error) {
	db := r.DB.WithContext(ctx)
	var user model.User
	db.Where("id = ?", "1").Find(&user)
	return &user, nil
}

// GetUser is the resolver for the getUser field.
func (r *queryResolver) GetUser(ctx context.Context, id string) (*model.User, error) {
	db := r.DB.WithContext(ctx)
	var user model.User
	db.Where("id = ?", id).Find(&user)
	return &user, nil
}

// GetJournalEntries is the resolver for the getJournalEntries field.
func (r *queryResolver) GetJournalEntries(ctx context.Context, userID string) ([]*model.JournalEntry, error) {
	panic(fmt.Errorf("not implemented: GetJournalEntries - getJournalEntries"))
}

// GetStreak is the resolver for the getStreak field.
func (r *queryResolver) GetStreak(ctx context.Context, userID string) (*model.Streak, error) {
	panic(fmt.Errorf("not implemented: GetStreak - getStreak"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
